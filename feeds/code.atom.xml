<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>War Against Computers</title><link href="alexcreek.com/" rel="alternate"></link><link href="alexcreek.com/feeds/code.atom.xml" rel="self"></link><id>alexcreek.com/</id><updated>2014-10-25T00:00:00-04:00</updated><entry><title>Git Cheatsheet</title><link href="alexcreek.com/git-cheatsheet.html" rel="alternate"></link><updated>2014-10-25T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-25:alexcreek.com/git-cheatsheet.html</id><summary type="html">&lt;h2&gt;How to commit properly&lt;/h2&gt;
&lt;p&gt;Commit all files in the working tree that have been modified&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -am &amp;#39;commit message&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Commit a file individually&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -m &amp;#39;commit message&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How not to commit&lt;/h2&gt;
&lt;p&gt;Only commit changes staged in the index, not all modified files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git commit -m &amp;#39;commit message&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Remove recently added files and unstage modifications&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git reset HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Revert modified files&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout -- [filename]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Remove files from tracking&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git rm --cached [filename]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Delete last commit (STAGED FILES WILL BE LOST)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git reset --hard HEAD~1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;List tracked files&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git ls-files --full-name
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;List branches&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git branch
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Push local branch to remote repo&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git push origin local-branch
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Delete remote branch&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git push origin :branch-name
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Useful log formats&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git log --oneline | --stat | --numstat
git show [commit]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Git history&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git reflog
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Prevent files from being added into git&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi $PROJECT_ROOT/.gitignore
    # add
    file_to_ignore
    directory_to_ignore
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Referring to previous commits&lt;/h2&gt;
&lt;p&gt;^ and ~ both refer to previous commits. However appending numbers doesn't always work as expected.  Use ~&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HEAD^  == HEAD~&lt;/li&gt;
&lt;li&gt;HEAD^1 == HEAD~1&lt;/li&gt;
&lt;li&gt;HEAD^^ == HEAD~~&lt;/li&gt;
&lt;li&gt;HEAD^2 != HEAD~2 || HEAD^^&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Get HTTP Headers Using PHP</title><link href="alexcreek.com/get-http-headers-using-php.html" rel="alternate"></link><updated>2014-10-03T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-03:alexcreek.com/get-http-headers-using-php.html</id><summary type="html">&lt;p&gt;The &lt;code&gt;getenv()&lt;/code&gt; function is used to parse enviroment variables created by the webserver executing the php code, including HTTP Headers.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$client_ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REMOTE_ADDR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Client IP: &lt;/span&gt;&lt;span class="si"&gt;$client_ip&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/br&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User Agent: &lt;/span&gt;&lt;span class="si"&gt;$user_agent&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/br&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using conditional statements, the headers can be parsed and then actions taken based upon their contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$ua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ua&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Wget&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;http_response_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Don&amp;#39;t wget me&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;apache_request_headers()&lt;/code&gt; returns an associative array containing all the headers passed to the server in a request.  This provides access to headers outside of what apache exposes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;apache_request_headers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x-forwarded-for&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;http_response_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No proxies jackhole&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see the values of all of apache's environment variables as well as all request headers, upload &lt;a href="https://gist.github.com/alexcreek/8fd436c6f7f9b5b58ae0"&gt;this&lt;/a&gt; script to your apache instance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://httpd.apache.org/docs/current/expr.html#vars"&gt;Apache Environment Variables&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Bash Oneliners</title><link href="alexcreek.com/bash-oneliners.html" rel="alternate"></link><updated>2014-10-02T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-02:alexcreek.com/bash-oneliners.html</id><summary type="html">&lt;h2&gt;Infinite while loops&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;It Never Ends&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key is the placement of the semicolons. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;x++&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; $x &lt;span class="sb"&gt;`&lt;/span&gt;date +%T&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; true&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Can you feel it?&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; mail -s &lt;span class="s1"&gt;&amp;#39;SMTP Test&amp;#39;&lt;/span&gt; admin@theHeazy.com&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Sed Tutorial</title><link href="alexcreek.com/sed-tutorial.html" rel="alternate"></link><updated>2014-10-02T00:00:00-04:00</updated><author><name>alex</name></author><id>tag:,2014-10-02:alexcreek.com/sed-tutorial.html</id><summary type="html">&lt;p&gt;Sed's primary function is to search for and replace text; we call this process "substitution".  Additionally, sed can easily append, insert and delete text.  The syntax can be somewhat intimidating to the new user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed &amp;#39;command/pattern/replacement/flags&amp;#39; file.txt
sed &amp;#39;\pattern\|line_number command/input_text/&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command field tells sed what to do when a match is found; the pattern field is the search string; the replacement field should be obvious and the flag defines various options such as how many times to act on a search hit.  The tricky part lies in the fact that sed has multiple syntaxes.  When performing operations on entire lines the command field is prefixed with the target line number(s) and the pattern field is not used. &lt;/p&gt;
&lt;h2&gt;Typical Use&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;s/herf/href/g&amp;#39; /var/www/index.html 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The example replaces all instances of herf with href, pretty slick huh?  Let's take a look at some of the other things Sed can do.&lt;/p&gt;
&lt;h2&gt;Substitution&lt;/h2&gt;
&lt;p&gt;We just saw this in the last example. Here we replace all instances of foo with bar&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;s/foo/bar/g&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deletion&lt;/h2&gt;
&lt;p&gt;Sed can also delete specific lines of text. The following removes line 10 from file.txt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;10d&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Range Deletion&lt;/h2&gt;
&lt;p&gt;A range of lines can be deleted at once using D. The example deletes line 95-10.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;95,100D&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Append&lt;/h2&gt;
&lt;p&gt;Strings can be appended after a specific line. This example appends Bazinga to a new line after line 20&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;20a\Bazinga\&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Insertion&lt;/h2&gt;
&lt;p&gt;Sed can insert text before specifed lines as well. Here we insert Incoming into line 20 thus moving line 20's contents to line 21&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;20i\Incoming\&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Replacement&lt;/h2&gt;
&lt;p&gt;Sed can also performs replacement of entire lines. Using the c command replaces the entire line with the specified string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;10c\Presto\&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pattern Match Deletion&lt;/h2&gt;
&lt;p&gt;Another deletion feature of Sed's is deleting lines that matches a pattern. The example deletes every line that contains the string false&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;/false/d&amp;#39;  file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h1&gt;Advanced Sed&lt;/h1&gt;
&lt;h2&gt;Sed's additional syntax (insert, append, delete, and replace):&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed /pattern/|line number i\ a\ d\ c\input_text\ filename
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Find a string and delete the line it's in&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;/error/d/&amp;#39; /var/log/tunnel.log
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;/d deletes a line that matches the pattern, it's part of sed's bizarre syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Find a string and insert stuff into the line before it&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;#39;/^exit/ i\iptables-restore &amp;lt; /etc/firewall.rules\&amp;#39; /etc/rc.local
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The additional syntax accepts line numbers and ranges, but matching regexes is much cleaner&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Find a string and replace the entire line&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed -i &amp;quot;s/^dc_relay_net.*$/dc_relay_net=&amp;#39;$IP&amp;#39;/&amp;quot; /etc/exim4/update-exim4.conf.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;-i actions are performed inline, directly within the file specified&lt;/li&gt;
&lt;li&gt;" " are used so $IP will expand AND it's contents will be surrounded by ' ' when finished&lt;/li&gt;
&lt;li&gt;The entire line gets replaced because of creative use of regex matching&lt;/li&gt;
&lt;li&gt;^ matches the beginning of a line, .* matches everything, $ matches the end of a line, duh&lt;/li&gt;
&lt;li&gt;sed -i "/dc_relay_net/ c\dc_relay_net='$IP'/" would work except the " "s mess up the command and they're needed due to using $IP&lt;/li&gt;
&lt;/ul&gt;</summary></entry></feed>